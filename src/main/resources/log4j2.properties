status=info
name=properties_configuration

# Log files location
property.basePath=./.log/

# ConsoleAppender will print logs on console
appender.console.type=Console
appender.console.name=consoleLogger
appender.console.target=SYSTEM_OUT
appender.console.layout.type=PatternLayout
# Specify the pattern of the logs
appender.console.layout.pattern=%d{yyyy-MM-dd HH:mm:ss} %magenta{%-5p} %blue{%c{1}:%L} - %m%n

# RollingFileAppender will print logs in file which can be rotated based on time or size
appender.rolling.type=RollingFile
appender.rolling.name=fileLogger
appender.rolling.fileName=${basePath}app.log
appender.rolling.filePattern=${basePath}app_%d{yyyyMMdd}.log.gz
appender.rolling.layout.type=PatternLayout
appender.rolling.layout.pattern=%d{yyyy-MM-dd HH:mm:ss.SSS} %level [%t] [%l] - %msg%n
appender.rolling.policies.type=Policies

# RollingFileAppender rotation policy
appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
appender.rolling.policies.size.size = 10MB
#appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
#appender.rolling.policies.time.interval = 1
#appender.rolling.policies.time.modulate = true
#appender.rolling.strategy.type = DefaultRolloverStrategy
#appender.rolling.strategy.delete.type = Delete
#appender.rolling.strategy.delete.basePath = ${basePath}
#appender.rolling.strategy.delete.maxDepth = 10
#appender.rolling.strategy.delete.ifLastModified.type = IfLastModified

# Delete all files older than 30 days
#appender.rolling.strategy.delete.ifLastModified.age = 30d

# Configure external library logging level
logger.spring.name=org.springframework
logger.spring.level=info
logger.hibernate.name=org.hibernate
logger.hibernate.level=info

# Configure root logger
rootLogger.level=info
rootLogger.appenderRef.rolling.ref=fileLogger
rootLogger.appenderRef.console.ref=consoleLogger